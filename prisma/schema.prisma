// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "linux-musl", "debian-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Booking {
  id           String   @id @default(uuid())
  user_id      String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  booking_date String
  booking_time Int
  regist_name  String
  name         String
  password     String
  is_deleted   Boolean @default(false)

  BuyBooking   BuyBooking?

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("booking")
}

model ExBooking { // 予約禁止日
  id           String   @id @default(uuid())
  start_date   String
  start_time   Int
  end_time     Int?
  description  String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_deleted   Boolean @default(false)

  @@map("ex_booking")
}

model BuyBooking { // 予約購入
  id           String   @id @default(uuid())
  booking_id   String   @unique
  user_id      String
  status       BuyBookingStatus
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  expire_at    String
  is_deleted   Boolean  @default(false)

  user         User?    @relation(fields: [user_id], references: [id])
  booking      Booking? @relation(fields: [booking_id], references: [id])

  @@map("buy_booking")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  user_id       String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          AccountRole? @default(USER)

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  bookings      Booking[]
  buyBookings   BuyBooking[]
  userGachas    UserGacha?
  schedules   Schedule[]
  userSchedules UserSchedule[]

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

model Profile {
  id         String   @id @default(uuid())
  user_id    String   @unique // UserのIDを外部キーとして利用
  name       String?
  student_id String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expected   String?                           // 卒業予定年度
  role       Role
  part       Part[]
  is_deleted Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade) // Userのidと1対1のリレーション
  @@map("profile")
}

model UserGacha {
  id         String   @id @default(uuid())
  user_id    String   @unique
  gacha_id   String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_gacha")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

model PadLock {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String
  password   String
  is_deleted Boolean  @default(false)

  @@map("pad_lock")
}

model YoutubeAuth {
  google_id     String   @id
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  email         String
  access_token  String
  refresh_token String
  token_expiry  DateTime
  is_deleted    Boolean  @default(false)

  @@map("youtube_auth")
}

model Playlist {
  playlistId String   @id @unique @map("playlist_id")
  title      String
  link       String
  liveDate   String   @map("live_date")
  videos     Video[]
  tags       String[] @default([])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("playlist")
}

model Video {
  videoId     String   @id @unique @map("video_id")
  title       String
  link        String
  liveDate    String   @map("live_date")
  tags        String[] @default([])
  playlistId  String   @map("playlist_id")
  playlist    Playlist @relation(fields: [playlistId], references: [playlistId])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("video")
}

model Schedule {
  id             String      @id @default(uuid())
  userId         String      @map("user_id")
  title          String
  startDate      String      @map("start_date") // ISO
  endDate        String      @map("end_date")  // ISO
  mention        String[]    @default([]) // 空配列なら mention なし
  timeExtended   Boolean     @default(false) @map("time_extended")
  deadline       String
  description    String?
  isDeleted      Boolean     @default(false) @map("is_deleted")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  user              User     @relation(fields: [userId], references: [id])
  scheduleTimeslots ScheduleTimeslot[]
  userSchedules     UserSchedule[]

  @@index([userId])
}

model Timeslot {
  id                 String      @id @default(uuid())
  date               String      // ISO
  time               Int         // time拡張が true なら 0-19, false なら 9-16

  scheduleTimeslots  ScheduleTimeslot[]
  userTimeslots      UserTimeslot[]

  @@unique([date, time])  // `date + time` を一意にすることで重複データを防ぐ
  @@map("timeslot")
}

model ScheduleTimeslot {
  id            String      @id @default(uuid())
  scheduleId    String      @map("schedule_id")
  timeslotId    String      @map("timeslot_id")

  schedule      Schedule?   @relation(fields: [scheduleId], references: [id])
  timeslot      Timeslot?   @relation(fields: [timeslotId], references: [id])

  @@unique([scheduleId, timeslotId])  // 同じスケジュールに同じ timeslot を二重登録しない
  @@map("schedule_timeslot")
}

model UserSchedule {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  scheduleId    String      @map("schedule_id")
  description   String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  isDeleted     Boolean     @default(false) @map("is_deleted")

  user          User        @relation(fields: [userId], references: [id])
  schedule      Schedule    @relation(fields: [scheduleId], references: [id])
  userTimeslots UserTimeslot[]

  @@index([userId])
  @@index([scheduleId])
  @@map("user_schedule")
}

model UserTimeslot {
  id               String      @id @default(uuid())
  userScheduleId   String      @map("user_schedule_id")
  timeslotId       String      @map("timeslot_id")

  userSchedule     UserSchedule @relation(fields: [userScheduleId], references: [id])
  timeslot         Timeslot     @relation(fields: [timeslotId], references: [id])

  @@unique([userScheduleId, timeslotId]) // ユーザーの予約が同じ timeslot に二重登録されるのを防ぐ
  @@map("user_timeslot")
}


enum Role {
  GRADUATE
  STUDENT
}

enum AccountRole {
  TOPADMIN
  ADMIN
  USER
}

enum Part {
  VOCAL
  BACKING_GUITAR
  LEAD_GUITAR
  BASS
  DRUMS
  KEYBOARD
  OTHER
}

enum BuyBookingStatus {
  UNPAID
  PAID
  CANCELED
  EXPIRED
}
