// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Booking {
  id           String   @id @default(uuid())
  user_id      String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  booking_date DateTime
  booking_time Int
  regist_name  String
  name         String
  password     String
  is_deleted   Boolean @default(false)

  user User? @relation(fields: [user_id], references: [id])

  @@map("booking")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  user_id       String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          AccountRole?

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  bookings      Booking[]

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("user")
}

model Profile {
  id         String   @id @default(uuid()) // UserのIDを外部キーとして利用
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expected   String                           // 卒業予定年度
  role       Role
  part       Part[]
  is_deleted Boolean  @default(false)

  user User @relation(fields: [id], references: [id]) // Userと1対1のリレーション
  @@map("profile")
}

model Account {
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

model PadLock {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  name       String
  password   String
  is_deleted Boolean  @default(false)

  @@map("pad_lock")
}

enum Role {
  GRADUATE
  STUDENT
}

enum AccountRole {
  ADMIN
  USER
}

enum Part {
  VOCAL
  BACKING_GUITER
  LEAD_GUITER
  BASS
  DRUMS
  KEYBOARD
  OTHER
}
